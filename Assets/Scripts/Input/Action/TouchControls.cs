//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CanTemplate.Input
{
    public partial class @TouchControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TouchControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""TouchMap"",
            ""id"": ""20b1087b-292e-4df8-9c0f-341fef5fecf9"",
            ""actions"": [
                {
                    ""name"": ""TouchTap"",
                    ""type"": ""Button"",
                    ""id"": ""10c905c2-6134-4853-996d-3baae599e01c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchHold"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a283d0a6-707c-4388-9c8c-228aba9cec6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""CustomHolding(pressPoint=0.4)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c75620c-9d0b-4bf6-a491-e61d2335db9b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b31c69b-edd9-4e3e-836e-fbe46fd0e4d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ViewportVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24ac4969-3207-4aa9-b0ae-0ccaa74b11c9"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""063b1799-4390-4c82-a4f1-07c8da22c3b0"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec3870ad-faab-4c68-addd-21b3b40d3c38"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07e9a1ea-b8f8-4612-b2ee-f4269caef46d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // TouchMap
            m_TouchMap = asset.FindActionMap("TouchMap", throwIfNotFound: true);
            m_TouchMap_TouchTap = m_TouchMap.FindAction("TouchTap", throwIfNotFound: true);
            m_TouchMap_TouchHold = m_TouchMap.FindAction("TouchHold", throwIfNotFound: true);
            m_TouchMap_TouchPosition = m_TouchMap.FindAction("TouchPosition", throwIfNotFound: true);
            m_TouchMap_TouchDelta = m_TouchMap.FindAction("TouchDelta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TouchMap
        private readonly InputActionMap m_TouchMap;
        private ITouchMapActions m_TouchMapActionsCallbackInterface;
        private readonly InputAction m_TouchMap_TouchTap;
        private readonly InputAction m_TouchMap_TouchHold;
        private readonly InputAction m_TouchMap_TouchPosition;
        private readonly InputAction m_TouchMap_TouchDelta;
        public struct TouchMapActions
        {
            private @TouchControls m_Wrapper;
            public TouchMapActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchTap => m_Wrapper.m_TouchMap_TouchTap;
            public InputAction @TouchHold => m_Wrapper.m_TouchMap_TouchHold;
            public InputAction @TouchPosition => m_Wrapper.m_TouchMap_TouchPosition;
            public InputAction @TouchDelta => m_Wrapper.m_TouchMap_TouchDelta;
            public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
            public void SetCallbacks(ITouchMapActions instance)
            {
                if (m_Wrapper.m_TouchMapActionsCallbackInterface != null)
                {
                    @TouchTap.started -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchTap;
                    @TouchTap.performed -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchTap;
                    @TouchTap.canceled -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchTap;
                    @TouchHold.started -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchHold;
                    @TouchHold.performed -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchHold;
                    @TouchHold.canceled -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchHold;
                    @TouchPosition.started -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchPosition;
                    @TouchPosition.performed -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchPosition;
                    @TouchPosition.canceled -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchPosition;
                    @TouchDelta.started -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchDelta;
                    @TouchDelta.performed -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchDelta;
                    @TouchDelta.canceled -= m_Wrapper.m_TouchMapActionsCallbackInterface.OnTouchDelta;
                }
                m_Wrapper.m_TouchMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TouchTap.started += instance.OnTouchTap;
                    @TouchTap.performed += instance.OnTouchTap;
                    @TouchTap.canceled += instance.OnTouchTap;
                    @TouchHold.started += instance.OnTouchHold;
                    @TouchHold.performed += instance.OnTouchHold;
                    @TouchHold.canceled += instance.OnTouchHold;
                    @TouchPosition.started += instance.OnTouchPosition;
                    @TouchPosition.performed += instance.OnTouchPosition;
                    @TouchPosition.canceled += instance.OnTouchPosition;
                    @TouchDelta.started += instance.OnTouchDelta;
                    @TouchDelta.performed += instance.OnTouchDelta;
                    @TouchDelta.canceled += instance.OnTouchDelta;
                }
            }
        }
        public TouchMapActions @TouchMap => new TouchMapActions(this);
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        public interface ITouchMapActions
        {
            void OnTouchTap(InputAction.CallbackContext context);
            void OnTouchHold(InputAction.CallbackContext context);
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnTouchDelta(InputAction.CallbackContext context);
        }
    }
}
